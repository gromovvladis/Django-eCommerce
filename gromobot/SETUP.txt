
=================================== Конфигурация сервера ===============================================


1. Создание пользователя
    Входим под root: root@5.35.89.111
    Вводим пароль из эл. письма: J4rqM8h*URnV
    Соглашаемся с сообщением:
        The authenticity of host '5.35.89.111 (5.35.89.111)' can't be established.
        ED25519 key fingerprint is SHA256:BXyr+8GiGyPSsiGtzFSXmtf+NevDRISJpnP80hhFUNE.
        This key is not known by any other names
        Are you sure you want to continue connecting (yes/no/[fingerprint])? 
    
        yes

    Создаем пользователя командами:
    ---------------------
    adduser username / создали пользователя
    apt update / обновили систему
    apt list --upgradable / поолучили список возможных обновления
    apt update / обновили систему еще раз
    apt install sudo / проверили наличие библиотеки sudo
    usermod -aG sudo username / добавили пользователя в группу sudo
    groups username / проверили группы пользователя (должно быть users, sudo)
    su username / переключиться на пользователя - username

    Создан пользователь - vladis@5.35.89.111


2. Устанавливаем ПО (NGINX, GIT, supervisor, PostgresQL, gunicorn)
    Команды:
        sudo apt install nginx
        sudo apt install git
        sudo apt install supervisor
        sudo apt install postgresql
        sudo apt install gunicorn


3. Создаем БД PostgresQL
    cd ~postgres/ / переходим в папку postgres/
    sudo -u postgres psql / запускаем в консоли возможность управлять PostgresQL

    Команды от имени "postgres=#": (точка с запятой в конце обязательны)
        CREATE DATABASE mikado; / создаем бд для микадо
        CREATE USER user_db WITH PASSWORD 'mikadosushi25'; / создаем пользователя с именем и паролем
        ALTER ROLE user_db SET client_encoding TO 'utf8'; / кодировка
        ALTER ROLE user_db SET default_transaction_isolation TO 'read committed'; / хз
        ALTER ROLE user_db SET timezone TO 'UTC'; / время в офрмате utc
        GRANT ALL PRIVILEGES ON DATABASE mikado TO user_db; / все привелении для бд mikado пользователю user_db
        ALTER DATABASE mikado OWNER TO user_db; / передаем владение бд пользователю 
        \q     / выйти из пользователя "postgres=#"

        CREATE DATABASE provence; / создаем бд для прованса
        GRANT ALL PRIVILEGES ON DATABASE provence TO user_db; / все привелении для бд provence пользователю user_db
        ALTER DATABASE provence OWNER TO user_db; / передаем владение бд пользователю 

    На случай, если понадобится удалить базу данных:
        cd ~postgres/ / переходим в папку postgres/
        sudo -u postgres psql / запускаем в консоли возможность управлять PostgresQL

        Прерываем все текущие изменения:
            SELECT pg_terminate_backend(pid)
            FROM pg_stat_activity
            WHERE datname = 'mikado';

        Удаляем БД:
            DROP DATABASE mikado; / удаляем


4. Проверяем версию Python и создаем venv
    python -V / версия питона 2+
    python3 -V / версия питона 3+

    Если версия питона 3 устраивает, то создаем venv из корневой папки:
        sudo apt install python3.11-venv / устанавливем библиотеку venv
        python3 -m venv venv / создаем виртульное окружение
        source venv/bin/activate / запускаем venv


5. Клонируем проект с GIT

    git init / указываем git, что данная директория является репозиторием Git

    если репа приватная то используем токен - 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
    git pull https://token@github.com/gromovvladis/mikado.git

    git pull https://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@github.com/gromovvladis/mikado.git

    отменить все локальные изменения 
        git reset --hard
    переместить изменения в папку stash
        git stash 
    

6. Устанавливаем зависимости
    Устанавливем библиотеки для норм работы:
        sudo apt-get install -y make build-essential libssl-dev zlib1g-dev 
        sudo apt-get install -y libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm
        sudo apt-get install -y libncurses5-dev  libncursesw5-dev xz-utils tk-dev

    Устанавливаем зависимости:
        pip install -U pip / обновляем pip
        pip install -r requirements.txt / устанавливем зависимости


7. Делаем миграции и создаем суперпользователя
    перед миграциями смотрим в файил настроек и убеждаемся, что в файле .env база данных подключена корректно
    переходим в директорию с файлом manage.py
    миграции
        python manage.py makemigrations
        python manage.py migrate
    
    суперпользователь
        python manage.py createsuperuser

    если были сделаны изменения непосредственно в базе данных, то запускаем Команду
        python manage.py rebuild_index
        python manage.py update_index


8. Конфигурация NGINX

    нужно удалить, если есть фаил
    sudo rm /etc/nginx/sites-enabled/default

    открываем фаил конфигурации NGING для основного сайта:
    sudo nano /etc/nginx/sites-available/mikado-sushi 

    очистить фаил команда: ALT + T

    Конфигурация:

        server {
	
            server_name mikado-sushi.ru www.mikado-sushi.ru 5.35.89.111;
            access_log  /var/log/nginx/logger.log;
            client_max_body_size 50M;

            location /media/ {
                root /home/vladis/mikado/public/;
                expires 30d;
            }

            location /static/ {
                root /home/vladis/mikado/public/;
                expires 30d;
            }

            location / {
                proxy_pass http://127.0.0.1:8000; 
                proxy_set_header Host $server_name;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            }
            
            listen 443 ssl http2; # managed by Certbot
            ssl_certificate /etc/letsencrypt/live/mikado-sushi.ru/fullchain.pem; # managed by Certbot
            ssl_certificate_key /etc/letsencrypt/live/mikado-sushi.ru/privkey.pem; # managed by Certbot
            include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
            ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

            http2 on;
            gzip_static on;
            gzip on;
            gzip_comp_level 5;
            gzip_types application/x-javascript application/javascript text/css image/jpeg image/png;  

        }

        server {

            if ($host = www.mikado-sushi.ru) {
                return 301 https://$host$request_uri;
            } # managed by Certbot


            if ($host = mikado-sushi.ru) {
                return 301 https://$host$request_uri;
            } # managed by Certbot


            listen 80;
            server_name mikado-sushi.ru www.mikado-sushi.ru 5.35.89.111;
            return 404; # managed by Certbot

        }

    Активируйте сайты сайта:
        sudo ln -s /etc/nginx/sites-available/mikado-sushi /etc/nginx/sites-enabled/
        sudo ln -s /etc/nginx/sites-available/provence-coffee /etc/nginx/sites-enabled/

    после установки сертификата дописать "http2" после "listen 433" - listen 433 ssl http2;    

    Перезапускаем NGING:
        sudo service nginx restart


9. Установка SSL серфтификата через
    Устанавливаем утилиту Certbot:
        sudo apt install certbot python3-certbot-nginx

    Запускаем Certbot:
        sudo certbot --nginx

    Установка сертификата Минцифры
        Скачать файлы (скачаются в корень):
            wget https://gu-st.ru/content/lending/russian_trusted_sub_ca_pem.crt
            wget https://gu-st.ru/content/lending/russian_trusted_root_ca_pem.crt
        Переместите файлы сертификатов в хранилище сертификатов в каталог /usr/local/share/ca-certificates/
        update-ca-certificates / Обновить сертификаты
        openssl s_client -connect sberbank.ru:443 2>/dev/null | grep 'Verify return code' / проверка
        Verify return code: 0 (ok) / если такоей ответ, то сертификаты вставли


10. Запускаем Supervisor для сайта и для Celery
    переходим в папку супервизора
        cd /etc/supervisor/conf.d/

    в этой папке создаем ссылки на файлы конфигураций mikado.conf, celery.conf, telegram.conf,
    создаем ссылку:
        sudo ln /home/vladis/mikado/site/config/mikado-site.conf
        sudo ln /home/vladis/mikado/site/config/mikado-celery.conf
        sudo ln /home/vladis/mikado/site/config/mikado-telegram-staff.conf

        sudo ln /home/vladis/provence/site/config/provence-site.conf
        sudo ln /home/vladis/provence/site/config/provence-celery.conf
        sudo ln /home/vladis/provence/site/config/provence-telegram-staff.conf

        для проверки телеграм бота: 
            /home/vladis/venv/bin/python /home/vladis/mikado/site/manage.py runbot_staff
            /home/vladis/venv/bin/python /home/vladis/provence/site/manage.py runbot_staff

    активируем супервизора:
        sudo update-rc.d supervisor enable

    запускаем супервизор:
        sudo service supervisor start

    проверка доспутности:
        sudo supervisorctl reread
    
    обновляем список процессов supervisor:
        sudo supervisorctl update

    команды для проверки статуса и перезагрузки:
        sudo supervisorctl status project
        sudo supervisorctl restart project
        sudo supervisorctl restart all


11. Настраиваем REDIS
    устанавливем редис сервер 
        sudo apt install redis-server

    запускаем сервер:
        sudo systemctl start redis-server

    делаем:
        sudo systemctl enable redis-server

    sudo nano /etc/redis/redis.conf

    Проверка
        redis-cli

    очистить кэш
        redis-cli Flushall


12. Собираем статику
    переходим в директорию с файлом manage.py
    python manage.py collectstatic
    python manage.py compress


13. Обновить изменения с Development в Production
    
    ssh vladis@5.35.89.111

    13.1 Mikado
        source venv/bin/activate
        cd mikado/site
        git pull https://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@github.com/gromovvladis/mikado.git
        python manage.py makemigrations
        python manage.py migrate
        python manage.py collectstatic
        python manage.py compress
        sudo supervisorctl restart all
        redis-cli Flushall

    13.2 Provence              
        source venv/bin/activate
        cd provence/site
        git pull https://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@github.com/gromovvladis/mikado.git
        python manage.py makemigrations
        python manage.py migrate
        python manage.py collectstatic
        python manage.py compress
        sudo supervisorctl restart all
        redis-cli Flushall

        sudo supervisorctl stop provence-site
