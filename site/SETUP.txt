
=================================== Конфигурация сервера ===============================================


1. Создание пользователя
    Входим под root: root@5.35.89.111
    Вводим пароль из эл. письма: J4rqM8h*URnV
    Соглашаемся с сообщением:
        The authenticity of host '5.35.89.111 (5.35.89.111)' can't be established.
        ED25519 key fingerprint is SHA256:BXyr+8GiGyPSsiGtzFSXmtf+NevDRISJpnP80hhFUNE.
        This key is not known by any other names
        Are you sure you want to continue connecting (yes/no/[fingerprint])? 
    
        yes

    Создаем пользователя командами:
    ---------------------
    adduser username / создали пользователя
    apt update / обновили систему
    apt list --upgradable / поолучили список возможных обновления
    apt update / обновили систему еще раз
    apt install sudo / проверили наличие библиотеки sudo
    usermod -aG sudo username / добавили пользователя в группу sudo
    groups username / проверили группы пользователя (должно быть users, sudo)
    su username / переключиться на пользователя - username

    Создан пользователь - vladis@5.35.89.111


2. Устанавливаем ПО (NGINX, GIT, supervisor, PostgresQL, gunicorn)
    Команды:
        sudo apt install nginx
        sudo apt install git
        sudo apt install supervisor
        sudo apt install postgresql
        sudo apt install gunicorn


3. Создаем БД PostgresQL
    cd ~postgres/ / переходим в папку postgres/
    sudo -u postgres psql / запускаем в консоли возможность управлять PostgresQL

    Команды от имени "postgres=#": (точка с запятой в конце обязательны)
        CREATE DATABASE mikado; / создаем бд для микадо
        CREATE USER user_db WITH PASSWORD 'mikadosushi25'; / создаем пользователя с именем и паролем
        ALTER ROLE user_db SET client_encoding TO 'utf8'; / кодировка
        ALTER ROLE user_db SET default_transaction_isolation TO 'read committed'; / хз
        ALTER ROLE user_db SET timezone TO 'UTC'; / время в офрмате utc
        GRANT ALL PRIVILEGES ON DATABASE mikado TO user_db; / все привелении для бд mikado пользователю user_db
        ALTER DATABASE mikado OWNER TO user_db; / передаем владение бд пользователю 
        \q     / выйти из пользователя "postgres=#"

        CREATE DATABASE provence; / создаем бд для прованса
        GRANT ALL PRIVILEGES ON DATABASE provence TO user_db; / все привелении для бд provence пользователю user_db
        ALTER DATABASE provence OWNER TO user_db; / передаем владение бд пользователю 

    На случай, если понадобится удалить базу данных:
        cd ~postgres/ / переходим в папку postgres/
        sudo -u postgres psql / запускаем в консоли возможность управлять PostgresQL

        Прерываем все текущие изменения:
            SELECT pg_terminate_backend(pid)
            FROM pg_stat_activity
            WHERE datname = 'mikado';

        Удаляем БД:
            DROP DATABASE mikado; / удаляем


4. Проверяем версию Python и создаем venv
    python -V / версия питона 2+
    python3 -V / версия питона 3+

    Если версия питона 3 устраивает, то создаем venv из корневой папки:
        sudo apt install python3.11-venv / устанавливем библиотеку venv
        python3 -m venv venv / создаем виртульное окружение
        source venv/bin/activate / запускаем venv


5. Клонируем проект с GIT

    git init / указываем git, что данная директория является репозиторием Git

    если репа приватная то используем токен - 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
    git pull https://token@github.com/gromovvladis/mikado.git

    git pull https://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@github.com/gromovvladis/mikado.git

    отменить все локальные изменения 
        git reset --hard
    переместить изменения в папку stash
        git stash 
    

6. Устанавливаем зависимости
    Устанавливем библиотеки для норм работы:
        sudo apt-get install -y make build-essential libssl-dev zlib1g-dev 
        sudo apt-get install -y libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm
        sudo apt-get install -y libncurses5-dev  libncursesw5-dev xz-utils tk-dev

    Устанавливаем зависимости:
        pip install -U pip / обновляем pip
        pip install -r requirements.txt / устанавливем зависимости


7. Делаем миграции и создаем суперпользователя
    перед миграциями смотрим в файил настроек и убеждаемся, что в файле .env база данных подключена корректно
    переходим в директорию с файлом manage.py
    миграции
        python manage.py makemigrations
        python manage.py migrate
    
    суперпользователь
        python manage.py createsuperuser

    если были сделаны изменения непосредственно в базе данных, то запускаем Команду
        python manage.py rebuild_index
        python manage.py update_index


8. Конфигурация NGINX

    нужно удалить, если есть фаил
    sudo rm /etc/nginx/sites-enabled/default

    открываем фаил конфигурации NGING для основного сайта:
    sudo nano /etc/nginx/sites-available/mikado-sushi 

    очистить фаил команда: ALT + T

    Конфигурация:

        server {
	
            server_name mikado-sushi.ru www.mikado-sushi.ru 5.35.89.111;
            access_log  /var/log/nginx/logger.log;
            client_max_body_size 50M;

            location /media/ {
                root /home/vladis/mikado/public/;
                expires 30d;
            }

            location /static/ {
                root /home/vladis/mikado/public/;
                expires 30d;
            }

            location / {
                proxy_pass http://127.0.0.1:8000; 
                proxy_set_header Host $server_name;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            }
            
            listen 443 ssl http2; # managed by Certbot
            ssl_certificate /etc/letsencrypt/live/mikado-sushi.ru/fullchain.pem; # managed by Certbot
            ssl_certificate_key /etc/letsencrypt/live/mikado-sushi.ru/privkey.pem; # managed by Certbot
            include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
            ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

            http2 on;
            gzip_static on;
            gzip on;
            gzip_comp_level 5;
            gzip_types application/x-javascript application/javascript text/css image/jpeg image/png;  

        }

        server {

            if ($host = www.mikado-sushi.ru) {
                return 301 https://$host$request_uri;
            } # managed by Certbot


            if ($host = mikado-sushi.ru) {
                return 301 https://$host$request_uri;
            } # managed by Certbot


            listen 80;
            server_name mikado-sushi.ru www.mikado-sushi.ru 5.35.89.111;
            return 404; # managed by Certbot

        }

    Активируйте сайты сайта:
        sudo ln -s /etc/nginx/sites-available/mikado-sushi /etc/nginx/sites-enabled/
        sudo ln -s /etc/nginx/sites-available/provence-coffee /etc/nginx/sites-enabled/

    после установки сертификата дописать "http2" после "listen 433" - listen 433 ssl http2;    

    Перезапускаем NGING:
        sudo service nginx restart


9. Установка SSL серфтификата через
    Устанавливаем утилиту Certbot:
        sudo apt install certbot python3-certbot-nginx

    Запускаем Certbot:
        sudo certbot --nginx

    Установка сертификата Минцифры
        Скачать файлы (скачаются в корень):
            wget https://gu-st.ru/content/lending/russian_trusted_sub_ca_pem.crt
            wget https://gu-st.ru/content/lending/russian_trusted_root_ca_pem.crt
        Переместите файлы сертификатов в хранилище сертификатов в каталог /usr/local/share/ca-certificates/
        update-ca-certificates / Обновить сертификаты
        openssl s_client -connect sberbank.ru:443 2>/dev/null | grep 'Verify return code' / проверка
        Verify return code: 0 (ok) / если такоей ответ, то сертификаты вставли


10. Запускаем Supervisor для сайта и для Celery
    переходим в папку супервизора
        cd /etc/supervisor/conf.d/

    в этой папке создаем ссылки на файлы конфигураций mikado.conf, celery.conf, telegram.conf,
    создаем ссылку:
        sudo ln /home/vladis/mikado/site/config/mikado-site.conf
        sudo ln /home/vladis/mikado/site/config/mikado-celery.conf
        
        

        sudo ln /home/vladis/provence/site/config/provence-site.conf
        sudo ln /home/vladis/provence/site/config/provence-celery.conf
        sudo ln /home/vladis/provence/site/config/provence-telegram-staff.conf

        для проверки телеграм бота: 
            /home/vladis/venv/bin/python /home/vladis/mikado/manage.py runbot

    активируем супервизора:
        sudo update-rc.d supervisor enable

    запускаем супервизор:
        sudo service supervisor start

    проверка доспутности:
        sudo supervisorctl reread
    
    обновляем список процессов supervisor:
        sudo supervisorctl update

    команды для проверки статуса и перезагрузки:
        sudo supervisorctl status project
        sudo supervisorctl restart project
        sudo supervisorctl restart all


11. Настраиваем REDIS
    устанавливем редис сервер 
        sudo apt install redis-server

    запускаем сервер:
        sudo systemctl start redis-server

    делаем:
        sudo systemctl enable redis-server

    sudo nano /etc/redis/redis.conf

    Проверка
        redis-cli

    очистить кэш
        redis-cli Flushall


12. Собираем статику
    переходим в директорию с файлом manage.py
    python manage.py collectstatic
    python manage.py compress


13. Обновить изменения с Development в Production
    ssh vladis@5.35.89.111

    source venv/bin/activate
    cd mikado
    cd site
    git pull https://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@github.com/gromovvladis/mikado.git
    python manage.py makemigrations
    python manage.py migrate
    python manage.py collectstatic
    python manage.py compress
    sudo supervisorctl restart all
    redis-cli Flushall

    source venv/bin/activate
    cd provence
    cd site
    git pull https://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@github.com/gromovvladis/mikado.git
    python manage.py makemigrations
    python manage.py migrate
    python manage.py collectstatic
    python manage.py compress
    sudo supervisorctl restart all
    redis-cli Flushall

    git pull https://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@github.com/gromovvladis/mikado.git server
    sudo supervisorctl restart all
    redis-cli Flushall

    sudo supervisorctl stop celery
    sudo supervisorctl stop telegram
    sudo supervisorctl stop mikado
    sudo systemctl stop redis-server


git clone https://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@github.com/gromovvladis/mikado.git ~/mikado

















============================================= Доп возможности =================================================

1. Бэкап БД из файла


=============================================== ИСХОДНИКИ =====================================================


Создание пользователя
---------------------
adduser username
usermod -aG sudo username
group username
su username
---------------------------------------
Компиляции python 3.6
----------------------
sudo apt-get install -y make build-essential libssl-dev zlib1g-dev
sudo apt-get install -y libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm
sudo apt-get install -y libncurses5-dev  libncursesw5-dev xz-utils tk-dev

wget https://www.python.org/ftp/python/3.6.4/Python-3.6.4.tgz
tar xvf Python-3.6.4.tgz
cd Python-3.6.4
./configure --enable-optimizations
make -j8
sudo make altinstall
python3.6

-----------------------------------------
Создание базы данных
--------------------
sudo -u postgres psql
CREATE DATABASE banket;
CREATE USER b_user WITH PASSWORD 'She3348Jdfurfghs';
ALTER ROLE userdb SET client_encoding TO 'utf8';
ALTER ROLE userdb SET default_transaction_isolation TO 'read committed';
ALTER ROLE userdb SET timezone TO 'UTC';
GRANT ALL PRIVILEGES ON DATABASE movie TO userdb;
\q

----------------------------------------
Установка Gunicorn
------------------
gunicorn project.wsgi:application --bind 111.222.333.44:8000
----------------------------------------
Настрока nginx
--------------
server {
    listen 80;
    server_name 111.222.333.44; # здесь прописать или IP-адрес или доменное имя сервера
    access_log  /var/log/nginx/example.log;
 
    location /static/ {
        root /home/user/myprojectenv/myproject/myproject/;
        expires 30d;
    }
 
    location / {
        proxy_pass http://127.0.0.1:8000; 
        proxy_set_header Host $server_name;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}

sudo service nginx restart

------------------------------------------
For SSL
-------
map $sent_http_content_type $expires {
    "text/html"                 epoch;
    "text/html; charset=utf-8"  epoch;
    default                     off;
}
server {
    listen 80;
    server_name www.django.com;
    return 301 https://django.com$request_uri;
}
server{
    listen 443 ssl;
    ssl on;                                      
    ssl_certificate /etc/ssl/django.crt;     
    ssl_certificate_key /etc/ssl/django.key; 
    server_name django.com;
    client_max_body_size 100M;

    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript;

    location /static/ {
        root /home/user/pj;
        expires 1d;
    }

    location /media/ {
        root /home/user/pj;
        expires 1d;
    }

    location / {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $server_name;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}

---------------------------------------
Настройка supervisor
cd /etc/supervisor/conf.d/
sudo update-rc.d supervisor enable
sudo service supervisor start
sudo supervisorctl reread
sudo supervisorctl update
sudo supervisorctl status project
sudo supervisorctl restart project
--------------------



======== Изменяем индексы после изменения товаров в бд =================
python manage.py update_index


======== Создаем БД =================
CREATE DATABASE mikado
CREATE USER user_db WITH PASSWORD 'mikadosushi';

ALTER ROLE user_db SET client_encoding TO 'utf8';
ALTER ROLE user_db SET default_transaction_isolation TO 'read committed';
ALTER ROLE user_db SET timezone TO 'UTC';
GRANT ALL PRIVILEGES ON DATABASE mikado TO vladis;

ALTER DATABASE mikado OWNER TO vladis;
ALTER DATABASE mikado OWNER TO user_db;



======== Настраиваем gunicorn =================
gunicorn mikado.config.wsgi:application --bind 5.35.89.111:8000
gunicorn config.wsgi:application --bind 5.35.89.111:8000


======== Настраиваем NGINX без SSL =================
server {
    listen 80;
    server_name mikado-sushi.ru www.mikado-sushi.ru 5.35.89.111;
    access_log  /var/log/nginx/logger.log;
    client_max_body_size 20M;
     location /media/ {
        root /home/vladis/mikado/public/;
        expires 30d;
    }

    location /static/ {
        root /home/vladis/mikado/public/;
        expires 30d;
    }

    location / {
        proxy_pass http://127.0.0.1:8000; 
        proxy_set_header Host $server_name;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}

======== Настраиваем NGINX пример с SSL =================


server {
    server_name mikado-sushi.ru www.mikado-sushi.ru 5.35.89.111;
    access_log  /var/log/nginx/logger.log;
    client_max_body_size 20M;

    location /media/ {
        root /home/vladis/mikado/public/;
        expires 30d;
    }

    location /static/ {
        root /home/vladis/mikado/public/;
        expires 30d;
    }
 
    location / {
        proxy_pass http://127.0.0.1:8000; 
        proxy_set_header Host $server_name;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    listen 443 ssl http2; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/mikado-sushi.ru/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/mikado-sushi.ru/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot


}

server {
     if ($host = www.mikado-sushi.ru) {
         return 301 https://$host$request_uri;
     } # managed by Certbot


     if ($host = mikado-sushi.ru) {
         return 301 https://$host$request_uri;
     } # managed by Certbot


     listen 80;
     server_name mikado-sushi.ru www.mikado-sushi.ru 5.35.89.111;
     return 404; # managed by Certbot

}


======== Настраиваем REDIS =================
sudo systemctl start redis-server
sudo systemctl enable redis-server
sudo nano /etc/redis/redis.conf




======== Копирум с репы GIT =================
git pull https://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@github.com/gromovvladis/mikado.git



======== Создание venv =================
python3 -m venv venv


======== Установка зависимостей =================
pip install -r requirements.txt 


======== Бэкап БД =================
sudo -u postgres pg_dump -Fc mikado > /home/vladis/mikado-backup.sql


+++++++++++++++++++++++++++ запросы gpt ++++++++++++++++++++++++++++++++++++++

Создай view и html шаблон для django для вывода списка совершенных платежей в сервисе yookassa https://yookassa.ru/, данные получи с помощью api и довавь возможностью фильтровать платежи по статусу платежа и по дате платежа

Создай python django приложение для службы доставки, который упорядычивает заказы для работы кухни, создает маршруты поезок для курьеров, рассчитывает выполнения заказов. 
Функционал: создай класс курьера, класс кухни, класс торговой сессии, класс рабочей смены курьера, класс заказа доставки, класс маршрута (включает в себя одну или несколько поездок), класс поездки.

Класс курьера хранит информацию о пользователе (внешний ключ на пользователя, информацию о пасспорте).
Класс торговой сессии хранит все заказы на сегодня. Класс получает заказ, проверяет наличие обекта торговой сессии на сегодня, если его нет, то создает торговую сессию и сохраняет в базу данных, проверяет его время выполнения, если время выполнения сегодня, то передает его в данную торговую сессию, если время заказа позже, то передает его в класс торговой сессии для заказов на позднее время
Класс рабочей смены курьера хранит ссылку на курьера, время начала смены, время окончания смены, количествой выполненных заказов, время в дороге, проеханое растояние за смену 
Класс кухни хранит информацию о заказах, которые имеют время выполнения сегодня и статус "выполняется" или "передан на кухню", считает время выполнения для каждого заказа с складывая время приготовления продуктов в заказе и распологает один заказ за другим, устанавливая время начала выполнения и конец выполнения
Класс поездки хранит начальную точку (адрес и координаты), продолжительность поездки в минутах, время начала поездки, время окончания поездки, растояние поездки 
Класс маршрута хранит информацию об одной или нескольких поездках, обязательно начинается в точке самовывоза и заканчиватеся в точке самовывоза

Логика расчета доставки следующая:

1. Узнаем ближайшее время свободное на кухне + 10 минут
2. Получаем у каждого курьера ближайшее свободное время доставки. Проверяем курьеров, у которых есть незавершённые доставки в этом же районе (или соседнем) сегодня но не больше чем за 40 минут до времени заказа и 40 минут после времени поездки (ближайшее свободное время без по пути), и не позже конца времёни приготовления заказа. Проверяем возможность добавить доставку до этой доставки (по возможности передвинуть время приготовления и вставить текущую доставку в начало поездки). Не забываем, что готовить повар может когда курьера нет, а курьеру нужно время на обратную дорогу, чтобы вернуться. Если уже созданных доставок под такие требования нет, то проверяем после (добавляем время приготовления, но не двигаем предыдущие доставки). Если 1-й или 2-й вариант подошли заносим в список курьера и время. Делаем для каждого и сортируем. Заносим в список получаем список [курьер, время, по пути=да/нет] - 3 параметра. По ним выбираем оптимальный.
3. По времени доставки определяем свободных курьеров из списка или курьеров, которые будут в той же зоне доставки. Если курьеров нет, то время самовывоза +15 минут (Яндекс курьер)
4. Проверяем 



3.1. Подключаем PG Admin

    sudo apt-get install python3-pip build-essential python3-dev libssl-dev libffi-dev

    apt list --upgradable / проверяем обновления
    sudo apt upgrade XXXXXXXXXXX / если есть обновления, то устанавливаем

    sudo apt update / обноваляем
    sudo apt install pgadmin4 / устанавливаем PGAdmin

    / возможно придется перезапустить NGING (если он уже запущен) так как pgAdmin4 пытается запустить Apache
        sudo systemctl stop apache2 / останавливаем Apache
        sudo systemctl disable apache2 / отключаем Apache
        sudo service nginx restart / перезапускаем NGING

    Для инициализации конфигурации в директории /usr/local/lib/python3.11/dist-packages/pgadmin4/ необходимо создать файл config_local.py:
        sudo mkdir -p /usr/local/lib/python3.11/dist-packages/pgadmin4/ / создаем директорию ВАЖНО ПРОВЕРИТЬ ВЕРСИЮ PYTHON
        sudo nano /usr/local/lib/python3.11/dist-packages/pgadmin4/config_local.py / создаем фаил ВАЖНО ПРОВЕРИТЬ ВЕРСИЮ PYTHON

    файл config_local.py:
        LOG_FILE = '/var/log/pgadmin/pgadmin.log'
        SQLITE_PATH = '/var/lib/pgadmin/pgadmin.db'
        SESSION_DB_PATH = '/var/lib/pgadmin/sessions'
        STORAGE_DIR = '/var/lib/pgadmin/storage'
        SERVER_MODE = True
        ALLOW_SAVE_PASSWORD = True
        DEFAULT_SERVER_PORT = 5050


    чтобы видеть работу портов можно установить lsof: 
        sudo apt install lsof
        sudo lsof -i :8000 / проверка 8000 порта


    Для установки uwsgi необходимо выполнить команду:
        sudo apt-get install uwsgi-core uwsgi-plugin-python3


    sudo uwsgi --http-socket :5050 --plugin python3 --chdir /usr/local/lib/python3.11/dist-packages/pgadmin4/ --wsgi-file /usr/local/lib/python3.11/dist-packages/pgadmin4/pgAdmin4.wsgi

    sudo uwsgi --http-socket :5050 --plugin python3 --chdir /usr/local/lib/python3.11/dist-packages/pgadmin4/ --wsgi-file /usr/local/lib/python3.11/dist-packages/pgadmin4/pgAdmin4.wsgi --uid vladis --gid www-data

    
    sudo rm /etc/apt/sources.list.d/pgadmin4.list / Удалите старую запись репозитория (если была добавлена)
    curl https://www.pgadmin.org/static/packages_pgadmin_org.pub | sudo tee /etc/apt/trusted.gpg.d/pgadmin.asc
    sudo sh -c 'echo "deb https://ftp.postgresql.org/pub/pgadmin/pgadmin4/apt/$(lsb_release -cs) pgadmin4 main" > /etc/apt/sources.list.d/pgadmin4.list' / Добавьте репозиторий снова (эту строку и строку выше можно запустить за раз)

    sudo apt update / Обновите репозитории
    sudo apt install pgadmin4 / Установите pgAdmin4


    создай файл в директории через FileZila
    usr/pgadmin4/config_local.py
    с текстом:
    DEFAULT_SERVER_PORT = 5050


    Установка pgAdmin4 как системного сервиса
    Если вы хотите, чтобы pgAdmin4 работал как системный сервис, вам нужно создать файл юнита. Вот как это сделать
    sudo nano /etc/systemd/system/pgadmin4.service / Создайте файл юнита

    Вставьте следующее содержание:
        [Unit]
        Description=pgAdmin 4
        After=network.target

        [Service]
        User=vladis
        Group=www-data
        WorkingDirectory=/usr/pgadmin4
        ExecStart=/usr/bin/python3 /usr/pgadmin4/bin/pgAdmin4
        Restart=always

        [Install]
        WantedBy=multi-user.target

    sudo systemctl daemon-reload / Перезагрузите системные службы
    sudo systemctl start pgadmin4 / Запустите pgAdmin4 как сервис
    sudo systemctl enable pgadmin4 / Чтобы включить его автозапуск при загрузке, выполните


    Теперь вы сможете управлять pgAdmin4 с помощью systemctl

    кароче не получилось :(